#cython: boundscheck=False
#cython: wraparound=False
#cython: cdivision=False
"""
State Space Models

Author: Chad Fulton  
License: Simplified-BSD
"""

{{py:

TYPES = {
    "s": ("np.float32_t", "np.float32", "np.NPY_FLOAT32"),
    "d": ("np.float64_t", "float", "np.NPY_FLOAT64"),
    "c": ("np.complex64_t", "np.complex64", "np.NPY_COMPLEX64"),
    "z": ("np.complex128_t", "complex", "np.NPY_COMPLEX128"),
}

}}

# Typical imports
import numpy as np
import warnings
cimport numpy as np
cimport cython

np.import_array()

from dismalpy.src.math cimport *
cimport dismalpy.src.blas as blas
cimport dismalpy.src.lapack as lapack
cimport dismalpy.ssm._tools as tools

cdef int FORTRAN = 1

{{for prefix, types in TYPES.items()}}
{{py:cython_type, dtype, typenum = types}}
{{py:
combined_prefix = prefix
combined_cython_type = cython_type
if prefix == 'c':
    combined_prefix = 'z'
    combined_cython_type = 'np.complex128_t'
if prefix == 's':
    combined_prefix = 'd'
    combined_cython_type = 'np.float64_t'
}}

## State Space Representation
cdef class {{prefix}}Statespace(object):
    """
    {{prefix}}Statespace(obs, design, obs_intercept, obs_cov, transition, state_intercept, selection, state_cov)

    *See Durbin and Koopman (2012), Chapter 4 for all notation*
    """

    # ### State space representation
    # 
    # $$
    # \begin{align}
    # y_t & = Z_t \alpha_t + d_t + \varepsilon_t \hspace{3em} & \varepsilon_t & \sim N(0, H_t) \\\\
    # \alpha_{t+1} & = T_t \alpha_t + c_t + R_t \eta_t & \eta_t & \sim N(0, Q_t) \\\\
    # & & \alpha_1 & \sim N(a_1, P_1)
    # \end{align}
    # $$
    # 
    # $y_t$ is $p \times 1$  
    # $\varepsilon_t$ is $p \times 1$  
    # $\alpha_t$ is $m \times 1$  
    # $\eta_t$ is $r \times 1$  
    # $t = 1, \dots, T$

    # `nobs` $\equiv T$ is the length of the time-series  
    # `k_endog` $\equiv p$ is dimension of observation space  
    # `k_states` $\equiv m$ is the dimension of the state space  
    # `k_posdef` $\equiv r$ is the dimension of the state shocks  
    # *Old notation: T, n, k, g*
    # cdef readonly int nobs, k_endog, k_states, k_posdef
    
    # `obs` $\equiv y_t$ is the **observation vector** $(p \times T)$  
    # `design` $\equiv Z_t$ is the **design vector** $(p \times m \times T)$  
    # `obs_intercept` $\equiv d_t$ is the **observation intercept** $(p \times T)$  
    # `obs_cov` $\equiv H_t$ is the **observation covariance matrix** $(p \times p \times T)$  
    # `transition` $\equiv T_t$ is the **transition matrix** $(m \times m \times T)$  
    # `state_intercept` $\equiv c_t$ is the **state intercept** $(m \times T)$  
    # `selection` $\equiv R_t$ is the **selection matrix** $(m \times r \times T)$  
    # `state_cov` $\equiv Q_t$ is the **state covariance matrix** $(r \times r \times T)$  
    # `selected_state_cov` $\equiv R Q_t R'$ is the **selected state covariance matrix** $(m \times m \times T)$  
    # `initial_state` $\equiv a_1$ is the **initial state mean** $(m \times 1)$  
    # `initial_state_cov` $\equiv P_1$ is the **initial state covariance matrix** $(m \times m)$
    #
    # With the exception of `obs`, these are *optionally* time-varying. If they are instead time-invariant,
    # then the dimension of length $T$ is instead of length $1$.
    #
    # *Note*: the initial vectors' notation 1-indexed as in Durbin and Koopman,
    # but in the recursions below it will be 0-indexed in the Python arrays.
    # 
    # *Old notation: y, -, mu, beta_tt_init, P_tt_init*
    # cdef readonly {{cython_type}} [::1,:] obs, obs_intercept, state_intercept
    # cdef readonly {{cython_type}} [:] initial_state
    # cdef readonly {{cython_type}} [::1,:] initial_state_cov
    # *Old notation: H, R, F, G, Q*, G Q* G'*
    # cdef readonly {{cython_type}} [::1,:,:] design, obs_cov, transition, selection, state_cov, selected_state_cov

    # `missing` is a $(p \times T)$ boolean matrix where a row is a $(p \times 1)$ vector
    # in which the $i$th position is $1$ if $y_{i,t}$ is to be considered a missing value.  
    # *Note:* This is created as the output of np.isnan(obs).
    # cdef readonly int [::1,:] missing
    # `nmissing` is an `T \times 0` integer vector holding the number of *missing* observations
    # $p - p_t$
    # cdef readonly int [:] nmissing

    # Flag for a time-invariant model, which requires that *all* of the
    # possibly time-varying arrays are time-invariant.
    # cdef readonly int time_invariant

    # Flag for initialization.
    # cdef readonly int initialized

    # Flag for diagonal observation covariance
    # TODO need to add this to the UI in representation
    # cdef public int diagonal_obs_cov

    # Temporary arrays
    # cdef {{cython_type}} [::1,:] tmp

    # Temporary selection arrays
    # cdef readonly {{cython_type}} [:] selected_obs
    # The following are contiguous memory segments which are then used to
    # store the data in the above matrices.
    # cdef readonly {{cython_type}} [:] selected_design
    # cdef readonly {{cython_type}} [:] selected_obs_cov

    # Temporary transformation arrays
    # cdef readonly {{cython_type}} [::1,:] transform_cholesky
    # cdef readonly {{cython_type}} [::1,:] transform_obs_cov
    # cdef readonly {{cython_type}} [::1,:] transform_design
    # cdef readonly {{cython_type}} transform_determinant

    # cdef readonly {{cython_type}} [:] collapse_obs
    # cdef readonly {{cython_type}} [::1,:] collapse_design
    # cdef readonly {{cython_type}} [::1,:] collapse_obs_cov
    # cdef readonly {{cython_type}} collapse_loglikelihood

    # Pointers  
    # *Note*: These are not yet implemented to do anything in this base class
    # but are used in subclasses. Necessary to have them here due to problems
    # with redeclaring the model attribute of KalmanFilter children classes
    # cdef {{cython_type}} * _obs
    # cdef {{cython_type}} * _design
    # cdef {{cython_type}} * _obs_intercept
    # cdef {{cython_type}} * _obs_cov
    # cdef {{cython_type}} * _transition
    # cdef {{cython_type}} * _state_intercept
    # cdef {{cython_type}} * _selection
    # cdef {{cython_type}} * _state_cov
    # cdef {{cython_type}} * _selected_state_cov
    # cdef {{cython_type}} * _initial_state
    # cdef {{cython_type}} * _initial_state_cov

    # ### Initialize state space model
    # *Note*: The initial state and state covariance matrix must be provided.
    def __init__(self,
                 {{cython_type}} [::1,:]   obs,
                 {{cython_type}} [::1,:,:] design,
                 {{cython_type}} [::1,:]   obs_intercept,
                 {{cython_type}} [::1,:,:] obs_cov,
                 {{cython_type}} [::1,:,:] transition,
                 {{cython_type}} [::1,:]   state_intercept,
                 {{cython_type}} [::1,:,:] selection,
                 {{cython_type}} [::1,:,:] state_cov):

        # Local variables
        cdef:
            np.npy_intp dim1[1]
            np.npy_intp dim2[2]
            np.npy_intp dim3[3]

        # #### State space representation variables  
        # **Note**: these arrays share data with the versions defined in
        # Python and passed to this constructor, so if they are updated in
        # Python they will also be updated here.
        self.obs = obs
        self.design = design
        self.obs_intercept = obs_intercept
        self.obs_cov = obs_cov
        self.transition = transition
        self.state_intercept = state_intercept
        self.selection = selection
        self.state_cov = state_cov

        # Dimensions
        self.k_endog = obs.shape[0]
        self.k_states = selection.shape[0]
        self.k_posdef = selection.shape[1]
        self.nobs = obs.shape[1]

        # #### Validate matrix dimensions
        #
        # Make sure that the given state-space matrices have consistent sizes
        tools.validate_matrix_shape('design', &self.design.shape[0],
                              self.k_endog, self.k_states, self.nobs)
        tools.validate_vector_shape('observation intercept', &self.obs_intercept.shape[0],
                              self.k_endog, self.nobs)
        tools.validate_matrix_shape('observation covariance matrix', &self.obs_cov.shape[0],
                              self.k_endog, self.k_endog, self.nobs)
        tools.validate_matrix_shape('transition', &self.transition.shape[0],
                              self.k_states, self.k_states, self.nobs)
        tools.validate_vector_shape('state intercept', &self.state_intercept.shape[0],
                              self.k_states, self.nobs)
        tools.validate_matrix_shape('state covariance matrix', &self.state_cov.shape[0],
                              self.k_posdef, self.k_posdef, self.nobs)

        # Check for a time-invariant model
        self.time_invariant = (
            self.design.shape[2] == 1           and
            self.obs_intercept.shape[1] == 1    and
            self.obs_cov.shape[2] == 1          and
            self.transition.shape[2] == 1       and
            self.state_intercept.shape[1] == 1  and
            self.selection.shape[2] == 1        and
            self.state_cov.shape[2] == 1
        )

        # Set the flag for initialization to be false
        self.initialized = False

        # By default, assume a diagonal observation covariance
        # (since it is most common to have diagonal or zero observation
        # covariance matrices, we don't want to test for, so require it to be
        # set manually)
        self.diagonal_obs_cov = True

        # Allocate selected state covariance matrix
        dim3[0] = self.k_states; dim3[1] = self.k_states; dim3[2] = 1;
        # (we only allocate memory for time-varying array if necessary)
        if self.state_cov.shape[2] > 1 or self.selection.shape[2] > 1:
            dim3[2] = self.nobs
        self.selected_state_cov = np.PyArray_ZEROS(3, dim3, {{typenum}}, FORTRAN)

        # Handle missing data
        self.missing = np.array(np.isnan(obs), dtype=np.int32, order="F")
        self.nmissing = np.array(np.sum(self.missing, axis=0), dtype=np.int32)
        self.has_missing = np.sum(self.nmissing) > 0

        # Create the temporary array
        # Holds arrays of dimension $(m \times m)$
        dim2[0] = self.k_states; dim2[1] = self.k_states;
        self.tmp = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)

        # Arrays for missing data
        dim1[0] = self.k_endog;
        self.selected_obs = np.PyArray_ZEROS(1, dim1, {{typenum}}, FORTRAN)
        dim1[0] = self.k_endog * self.k_states;
        self.selected_design = np.PyArray_ZEROS(1, dim1, {{typenum}}, FORTRAN)
        dim1[0] = self.k_endog**2;
        self.selected_obs_cov = np.PyArray_ZEROS(1, dim1, {{typenum}}, FORTRAN)

        # Arrays for transformations
        dim2[0] = self.k_endog; dim2[1] = self.k_endog;
        self.transform_cholesky = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)
        self.transform_obs_cov = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)
        dim2[0] = self.k_endog; dim2[1] = self.k_states;
        self.transform_design = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)

        dim1[0] = self.k_states;
        self.collapse_obs = np.PyArray_ZEROS(1, dim1, {{typenum}}, FORTRAN)
        dim2[0] = self.k_states; dim2[1] = self.k_states;
        self.collapse_design = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)
        self.collapse_obs_cov = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)

    # ## Initialize: known values
    #
    # Initialize the filter with specific values, assumed to be known with
    # certainty or else as filled with parameters from a maximum likelihood
    # estimation run.
    def initialize_known(self, {{cython_type}} [:] initial_state, {{cython_type}} [::1,:] initial_state_cov):
        """
        initialize_known(initial_state, initial_state_cov)
        """
        tools.validate_vector_shape('inital state', &initial_state.shape[0], self.k_states, None)
        tools.validate_matrix_shape('initial state covariance', &initial_state_cov.shape[0], self.k_states, self.k_states, None)

        self.initial_state = initial_state
        self.initial_state_cov = initial_state_cov

        self.initialized = True

    # ## Initialize: approximate diffuse priors
    #
    # Durbin and Koopman note that this initialization should only be coupled
    # with the standard Kalman filter for "approximate exploratory work" and
    # can lead to "large rounding errors" (p. 125).
    # 
    # *Note:* see Durbin and Koopman section 5.6.1
    def initialize_approximate_diffuse(self, {{cython_type}} variance=1e2):
        """
        initialize_approximate_diffuse(variance=1e2)
        """
        cdef np.npy_intp dim[1]
        dim[0] = self.k_states
        self.initial_state = np.PyArray_ZEROS(1, dim, {{typenum}}, FORTRAN)
        self.initial_state_cov = np.eye(self.k_states, dtype={{dtype}}).T * variance

        self.initialized = True

    # ## Initialize: stationary process
    # *Note:* see Durbin and Koopman section 5.6.2
    def initialize_stationary(self):
        """
        initialize_stationary()
        """
        cdef np.npy_intp dim1[1]
        cdef np.npy_intp dim2[2]
        cdef int inc = 1
        cdef int k_states2 = self.k_states**2

        # Create selected state covariance matrix
        {{prefix}}select_state_cov(self.k_states, self.k_posdef,
                                   &self.tmp[0,0],
                                   &self.selection[0,0,0],
                                   &self.state_cov[0,0,0],
                                   &self.selected_state_cov[0,0,0])

        # Initial state means are all zero
        dim1[0] = self.k_states
        self.initial_state = np.PyArray_ZEROS(1, dim1, {{typenum}}, FORTRAN)
        dim2[0] = self.k_states; dim2[1] = self.k_states;
        self.initial_state_cov = np.PyArray_ZEROS(2, dim2, {{typenum}}, FORTRAN)

        # Create a copy of the transition matrix (to avoid overwriting it)
        blas.{{prefix}}copy(&k_states2, &self.transition[0,0,0], &inc,
                                   &self.tmp[0,0], &inc)

        # Copy the selected state covariance to the initial state covariance
        # (it will be overwritten with the appropriate matrix)
        blas.{{prefix}}copy(&k_states2, &self.selected_state_cov[0,0,0], &inc,
                                   &self.initial_state_cov[0,0], &inc)

        # Solve the discrete Lyapunov equation to the get initial state
        # covariance matrix
        tools._{{prefix}}solve_discrete_lyapunov(&self.tmp[0,0], &self.initial_state_cov[0,0], self.k_states)

        self.initialized = True

    cdef void initialize_object_pointers(self, unsigned int t) except *:
        # Indices for possibly time-varying arrays
        cdef:
            int design_t = 0
            int obs_intercept_t = 0
            int obs_cov_t = 0
            int transition_t = 0
            int state_intercept_t = 0
            int selection_t = 0
            int state_cov_t = 0

        # Get indices for possibly time-varying arrays
        if not self.time_invariant:
            if self.design.shape[2] > 1:             design_t = t
            if self.obs_intercept.shape[1] > 1:      obs_intercept_t = t
            if self.obs_cov.shape[2] > 1:            obs_cov_t = t
            if self.transition.shape[2] > 1:         transition_t = t
            if self.state_intercept.shape[1] > 1:    state_intercept_t = t
            if self.selection.shape[2] > 1:          selection_t = t
            if self.state_cov.shape[2] > 1:          state_cov_t = t

        # Initialize object-level pointers to statespace arrays
        self._obs = &self.obs[0, t]
        self._design = &self.design[0, 0, design_t]
        self._obs_intercept = &self.obs_intercept[0, obs_intercept_t]
        self._obs_cov = &self.obs_cov[0, 0, obs_cov_t]
        self._transition = &self.transition[0, 0, transition_t]
        self._state_intercept = &self.state_intercept[0, state_intercept_t]
        self._selection = &self.selection[0, 0, selection_t]
        self._state_cov = &self.state_cov[0, 0, state_cov_t]

        # Initialize object-level pointers to initialization
        if not self.initialized:
            raise RuntimeError("Statespace model not initialized.")
        self._initial_state = &self.initial_state[0]
        self._initial_state_cov = &self.initial_state_cov[0,0]

    cdef void select_state_cov(self, unsigned int t):
        cdef int selected_state_cov_t = 0

        # ### Get selected state covariance matrix
        if t == 0 or self.selected_state_cov.shape[2] > 1:
            selected_state_cov_t = t
            self._selected_state_cov = &self.selected_state_cov[0, 0, selected_state_cov_t]

            {{prefix}}select_state_cov(self.k_states, self.k_posdef,
                                       &self.tmp[0,0],
                                       self._selection,
                                       self._state_cov,
                                       self._selected_state_cov)
        else:
            self._selected_state_cov = &self.selected_state_cov[0, 0, 0]

    cdef int select_missing(self, unsigned int t):
        # Note: this assumes that initialize_object_pointers has *already* been done
        # Note: this assumes that transform_... will be done *later*
        cdef int k_endog = self.k_endog
        # ### Perform missing selections
        # In Durbin and Koopman (2012), these are represented as matrix
        # multiplications, i.e. $Z_t^* = W_t Z_t$ where $W_t$ is a row
        # selection matrix (it contains a subset of rows of the identity
        # matrix).
        #
        # It's more efficient, though, to just copy over the data directly,
        # which is what is done here. Note that the `selected_*` arrays are
        # defined as single-dimensional, so the assignment indexes below are
        # set such that the arrays can be interpreted by the BLAS and LAPACK
        # functions as two-dimensional, column-major arrays.
        #
        # In the case that all data is missing (e.g. this is what happens in
        # forecasting), we actually set don't change the dimension, but we set
        # the design matrix to the zeros array.
        if self.nmissing[t] == self.k_endog:
            self._select_missing_entire_obs(t)
        elif self.nmissing[t] > 0:
            self._select_missing_partial_obs(t)
            k_endog = self.k_endog - self.nmissing[t]

        # Return the number of non-missing endogenous variables
        return k_endog

    cdef void _select_missing_entire_obs(self, unsigned int t):
        cdef:
            int i, j

        # Design matrix is set to zeros
        for i in range(self.k_states):
            for j in range(self.k_endog):
                self.selected_design[j + i*self.k_endog] = 0.0
        self._design = &self.selected_design[0]

    cdef void _select_missing_partial_obs(self, unsigned int t):
        cdef:
            int i, j, k, l
            int inc = 1
            int design_t = 0
            int obs_cov_t = 0
            int k_endog = self.k_endog - self.nmissing[t]

        k = 0
        for i in range(self.k_endog):
            if not self.missing[i, t]:

                self.selected_obs[k] = self._obs[i]

                # i is rows, k is rows
                blas.{{prefix}}copy(&self.k_states,
                      self._design, &self.k_endog,
                      &self.selected_design[k], &k_endog)

                # i, k is columns, j, l is rows
                l = 0
                for j in range(self.k_endog):
                    if not self.missing[j, t]:
                        self.selected_obs_cov[l + k*k_endog] = self._obs_cov[j + i*self.k_endog]
                        l += 1
                k += 1
        self._obs = &self.selected_obs[0]
        self._design = &self.selected_design[0]
        self._obs_cov = &self.selected_obs_cov[0]

    cdef void transform_diagonalize(self, unsigned int t) except *:
        # Note: this assumes that initialize_object_pointers has *already* been done
        # Note: this assumes that select_missing has *already* been done
        # TODO need unit tests, especially for the missing case
        cdef:
            int k_endog = self.k_endog
            int k_endog2 = self.k_endog**2
            int k_states = self.k_states
            int k_endogstates = self.k_endog * self.k_states
            int i, j, inc=1
            int obs_cov_t, design_t
            int info
            int reset_missing
        # Compute the cholesky decomposition of *self._obs_cov
        if not self.diagonal_obs_cov:

            # Handle missing data
            if self.nmissing[t] > 0 and not self.nmissing[t] == self.k_endog:
                k_endog = self.k_endog - self.nmissing[t]
                k_endog2 = k_endog**2
                k_endogstates = k_endog * k_states

            reset_missing = self.nmissing[t]
            if t > 0:
                reset_missing = reset_missing + self.nmissing[t-1]

            # Perform the LDL decomposition, if necessary
            if t == 0 or self.obs_cov.shape[2] > 1 or reset_missing:

                # Cholesky decomposition: $H = L L'$
                blas.{{prefix}}copy(&k_endog2, self._obs_cov, &inc, &self.transform_cholesky[0,0], &inc)
                # Use LDA=self.k_endog so that we can use the memoryview slicing below
                lapack.{{prefix}}potrf("L", &k_endog, &self.transform_cholesky[0,0], &self.k_endog, &info)

                # Check for errors
                if info > 0:
                    # Only warn, since it is sometimes possible to carry on anyway
                    # (e.g. if it is positive semi-definite)
                    warnings.warn('Non-positive-definite observation covariance matrix encountered at period %d' % t)
                elif info < 0:
                    raise np.linalg.LinAlgError('Invalid value in observation covariance matrix encountered at period %d' % t)

                # Convert to $H = C D C'$
                for i in range(k_endog): # i is rows
                    for j in range(k_endog): # j is columns
                        # Diagonal elements come from the Cholesky diagonal, squared
                        if i == j:
                            self.transform_obs_cov[i,i] = self.transform_cholesky[i, i]**2
                        # Other elements are zero
                        else:
                            self.transform_obs_cov[i,j] = 0

                    # Convert from L to C simply by setting the diagonal elements to ones
                    self.transform_cholesky[i,i] = 1
            
            # Solve for y_t^*
            # (unless this is a completely missing observation)
            if not self.nmissing[t] == self.k_endog:
                # If we have some missing elements, selected_obs is already populated
                if self.nmissing[t] == 0:
                    blas.{{prefix}}copy(&self.k_endog, &self.obs[0,t], &inc, &self.selected_obs[0], &inc)
                lapack.{{prefix}}trtrs("L", "N", "U", &k_endog, &inc, &self.transform_cholesky[0,0], &self.k_endog, &self.selected_obs[0], &k_endog, &info)

                # Check for errors
                if info > 0:
                    raise np.linalg.LinAlgError('Singular factorization of observation covariance matrix encountered at period %d' % t)
                elif info < 0:
                    raise np.linalg.LinAlgError('Invalid value in factorization of observation covariance matrix encountered at period %d' % t)

                # Setup the pointer
                self._obs = &self.selected_obs[0]

            # Solve for Z_t^*, if necessary
            if t == 0 or self.design.shape[2] > 1 or reset_missing:
                blas.{{prefix}}copy(&k_endogstates, self._design, &inc, &self.transform_design[0,0], &inc)
                lapack.{{prefix}}trtrs("L", "N", "U", &k_endog, &k_states, &self.transform_cholesky[0,0], &self.k_endog, &self.transform_design[0,0], &k_endog, &info)

                # Check for errors
                if info > 0:
                    raise np.linalg.LinAlgError('Singular factorization of observation covariance matrix encountered at period %d' % t)
                elif info < 0:
                    raise np.linalg.LinAlgError('Invalid value in factorization of observation covariance matrix encountered at period %d' % t)

            # Setup final pointers            
            self._design = &self.transform_design[0,0]
            self._obs_cov = &self.transform_obs_cov[0,0]

    cdef void transform_generalized_collapse(self, unsigned int t) except *:
        # Note: this assumes that initialize_object_pointers has *already* been done
        # Note: this assumes that select_missing has *already* been done
        # TODO need unit tests, especially for the missing case
        cdef:
            int k_endog = self.k_endog
            int k_endog2 = self.k_endog**2
            int k_states = self.k_states
            int k_endogstates = self.k_endog * self.k_states
            int i, j, inc=1
            int obs_cov_t, design_t
            int info
            int reset_missing
            {{cython_type}} alpha = 1.0
            {{cython_type}} beta = 0.0
            {{cython_type}} gamma = -1.0
        # $y_t^* = \bar A^* y_t = C_t Z_t' H_t^{-1} y_t$  
        # $Z_t^* = C_t^{-1}$  
        # $H_t^* = I_m$  

        # Handle missing data
        if self.nmissing[t] > 0 and not self.nmissing[t] == self.k_endog:
            k_endog = self.k_endog - self.nmissing[t]
            k_endog2 = k_endog**2
            k_endogstates = k_endog * k_states

        reset_missing = self.nmissing[t]
        if t > 0:
            reset_missing = reset_missing + self.nmissing[t-1]            

        # Set H_t^* to identity
        if t == 0:
            for i in range(k_states):
                self.collapse_obs_cov[i,i] = 1

        # Perform the Cholesky decomposition of H_t, if necessary
        if t == 0 or self.obs_cov.shape[2] > 1 or reset_missing:
            # Cholesky decomposition: $H = L L'$
            blas.{{prefix}}copy(&k_endog2, self._obs_cov, &inc, &self.transform_cholesky[0,0], &inc)
            # Use LDA=self.k_endog so that we can use the memoryview slicing below
            lapack.{{prefix}}potrf("L", &k_endog, &self.transform_cholesky[0,0], &self.k_endog, &info)

            # Check for errors
            if info > 0:
                # Only warn, since it is sometimes possible to carry on anyway (e.g. if it is positive semi-definite)
                warnings.warn('Non-positive-definite observation covariance matrix encountered at period %d' % t)
            elif info < 0:
                raise np.linalg.LinAlgError('Invalid value in observation covariance matrix encountered at period %d' % t)

            # Calculate the determinant (just the squared product of the
            # diagonals, in the Cholesky decomposition case)
            self.transform_determinant = 1.0
            for i in range(k_endog):
                self.transform_determinant = self.transform_determinant * self.transform_cholesky[i, i]
            self.transform_determinant = self.transform_determinant**2

        # Get C^{-1}, if necessary
        if t == 0 or self.obs_cov.shape[2] > 1 or self.design.shape[2] > 1 or reset_missing:
            # Calculate $H_t^{-1} Z_t \equiv (Z_t' H_t^{-1})'$ via Cholesky solver
            blas.{{prefix}}copy(&k_endogstates, self._design, &inc, &self.transform_design[0,0], &inc)
            lapack.{{prefix}}potrs("L", &k_endog, &k_states, &self.transform_cholesky[0,0], &self.k_endog, &self.transform_design[0,0], &k_endog, &info)

            # Check for errors
            if not info == 0:
                raise np.linalg.LinAlgError('Invalid value in calculation of H_t^{-1}Z matrix encountered at period %d' % t)
        
            # Calculate $(H_t^{-1} Z_t)' Z_t$  
            # $(m \times m) = (m \times p) (p \times p) (p \times m)$
            blas.{{prefix}}gemm("T", "N", &k_states, &k_states, &k_endog,
                   &alpha, self._design, &k_endog,
                           &self.transform_design[0,0], &k_endog,
                   &beta, &self.collapse_design[0,0], &k_states)

            # Calculate $C_t^{-1} C_t^{-1}' = Z_t' H_t^{-1} Z_t$ Cholesky decomposition
            lapack.{{prefix}}potrf("L", &k_states, &self.collapse_design[0,0], &self.k_states, &info)

            # Check for errors
            if info > 0:
                # Only warn, since it is sometimes possible to carry on anyway (e.g. if it is positive semi-definite)
                warnings.warn('Non-positive-definite ZHZ matrix encountered at period %d' % t)
            elif info < 0:
                raise np.linalg.LinAlgError('Invalid value in ZHZ matrix encountered at period %d' % t)

        # Solve for $y_t^* = \bar A_t^* y_t = (C_t^{-1})^{-1} Z_t' H_t^{-1} y_t$  
        # (unless this is a completely missing observation)
        self.collapse_loglikelihood = 0
        if not self.nmissing[t] == self.k_endog:
            # If we have some missing elements, selected_obs is already populated
            if self.nmissing[t] == 0:
                blas.{{prefix}}copy(&self.k_endog, &self.obs[0,t], &inc, &self.selected_obs[0], &inc)
            # $\\# = Z_t' H_t^{-1} y_t$
            blas.{{prefix}}gemv("T", &k_endog, &k_states,
                  &alpha, &self.transform_design[0,0], &k_endog,
                          &self.selected_obs[0], &inc,
                  &beta, &self.collapse_obs[0], &inc)
            # Solve $C_t^{-1} y_t^* = \\#$  
            lapack.{{prefix}}potrs("L", &k_states, &inc, &self.collapse_design[0,0], &self.k_states, &self.collapse_obs[0], &k_endog, &info)

            # Check for errors
            if not info == 0:
                raise np.linalg.LinAlgError('Invalid value in calculation of y_t^* matrix encountered at period %d' % t)

            # Get residuals for loglikelihood calculation
            # $e_t = - Z_t y_t^* + y_t$
            blas.{{prefix}}gemv("T", &k_endog, &k_states,
                  &gamma, self._design, &k_endog,
                          &self.collapse_obs[0], &inc,
                  &beta, &self.selected_obs[0], &inc)

            print(np.array(self.collapse_obs))
            print(np.array(self.selected_obs))

            # Calculate H_t^{-1} e_t via Cholesky solver
            lapack.{{prefix}}potrs("L", &k_endog, &inc, &self.transform_cholesky[0,0], &self.k_endog, &self.selected_obs[0], &k_endog, &info)

            # Calculate loglikelihood contribution of this observation

            # e_t' H_t^{-1} e_t
            for i in range(k_endog):
                self.collapse_loglikelihood = self.collapse_loglikelihood + self.selected_obs[i]
            self.collapse_loglikelihood = self.collapse_loglikelihood**2
            
            # log( 2*pi^(p-m) |H_t| )
            self.collapse_loglikelihood = (
                self.collapse_loglikelihood +
                {{combined_prefix}}log((2*NPY_PI)**(k_endog - k_states) * self.transform_determinant)
            )

            # -0.5 * ...
            self.collapse_loglikelihood = -0.5 * self.collapse_loglikelihood

        # Set pointers
        self._obs = &self.collapse_obs[0]
        self._design = &self.collapse_design[0,0]
        self._obs = &self.collapse_obs_cov[0,0]

# ### Selected state covariance matrice
cdef int {{prefix}}select_state_cov(int k_states, int k_posdef,
                                    {{cython_type}} * tmp,
                                    {{cython_type}} * selection,
                                    {{cython_type}} * state_cov,
                                    {{cython_type}} * selected_state_cov):
    cdef:
        {{cython_type}} alpha = 1.0
        {{cython_type}} beta = 0.0

    # Only need to do something if there is a state covariance matrix
    # (i.e k_posdof == 0)
    if k_posdef > 0:

        # #### Calculate selected state covariance matrix  
        # $Q_t^* = R_t Q_t R_t'$
        # 
        # Combine the selection matrix and the state covariance matrix to get
        # the simplified (but possibly singular) "selected" state covariance
        # matrix (see e.g. Durbin and Koopman p. 43)

        # `tmp0` array used here, dimension $(m \times r)$  

        # $\\#_0 = 1.0 * R_t Q_t$  
        # $(m \times r) = (m \times r) (r \times r)$
        blas.{{prefix}}gemm("N", "N", &k_states, &k_posdef, &k_posdef,
              &alpha, selection, &k_states,
                      state_cov, &k_posdef,
              &beta, tmp, &k_states)
        # $Q_t^* = 1.0 * \\#_0 R_t'$  
        # $(m \times m) = (m \times r) (m \times r)'$
        blas.{{prefix}}gemm("N", "T", &k_states, &k_states, &k_posdef,
              &alpha, tmp, &k_states,
                      selection, &k_states,
              &beta, selected_state_cov, &k_states)

{{endfor}}